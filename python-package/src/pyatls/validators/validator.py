from abc import ABC, abstractmethod

from cryptography.x509.oid import ObjectIdentifier


class Validator(ABC):
    """
    Abstract class representing functionality to verify evidence or appraise an
    attestation result generated by an attester or verifier, respectively.
    """

    @staticmethod
    @abstractmethod
    def accepts(oid: ObjectIdentifier) -> bool:
        """
        Returns whether this validator can appraise an attestation document
        contained in a certificate extension with the specified X.509 Object
        Identifier (OID).
        """
        raise NotImplementedError

    @abstractmethod
    def validate(
        self, document: bytes, public_key: bytes, nonce: bytes
    ) -> bool:
        """
        Given an attestation document, a public key, and a nonce, appraises the
        document to ascertain the trustworthiness of the issuer.

        Parameters
        ----------
        document : bytes
            A string of bytes whose underlying format is understood only by the
            issuer and validator pair that issued it and that will validate it,
            respectively. In other words, the contents of this parameters are
            opaque to the caller.

        public_key : bytes
            A public key in PKIX ASN.1 DER form. More specifically, this is an
            ASN.1 DER-marshalled SubjectPublicKeyInfo structure as per RFC
            5280, Section 4.1

        nonce : bytes
            A random string of bytes that must be present in the attestation
            document as a means to ascertain the freshness of the evidence and
            prevent replay attacks.

        Returns
        -------
        ok : bool
            True if the document proves that the peer is trustworthy and False
            otherwise.
        """
        raise NotImplementedError
